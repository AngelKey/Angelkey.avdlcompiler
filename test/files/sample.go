// Auto-generated by avdl-compiler v1.3.0 (https://github.com/keybase/node-avdl-compiler)
//   Input file: /Users/max/src/keybase/node-avdl-compiler/test/files/../avdl/sample.avdl

package sample1

import (
	rpc "github.com/keybase/go-framed-msgpack-rpc"
	context "golang.org/x/net/context"
	keybase1 "github.com/keybase/client/go/protocol"
)


// Joe is an alias for an int.
type Joe int
// R is a rad record.
type R struct {
	Bar	keybase1.Bar	`codec:"bar" json:"bar"`
}

type GetBazArg struct {
	R	R	`codec:"r" json:"r"`
	Beep	keybase1.Beep	`codec:"beep" json:"beep"`
}

type NotifierArg struct {
	I	int	`codec:"i" json:"i"`
}

// SampleInterface protocol is a sample among samples.
type SampleInterface interface {
	// GetBaz will get a baz like you wouldn't believe.
	// If this baz isn't gotten, then I'll eat my hat
	// 
	// And then.
	GetBaz(context.Context, GetBazArg) (keybase1.Baz,error)
	// Notifier notifies the notifiee.
	Notifier(context.Context, int) (error)
}

func SampleProtocol(i SampleInterface) rpc.Protocol {
	return rpc.Protocol {
		Name: "sample.1.sample",
		Methods: map[string]rpc.ServeHandlerDescription{
			"getBaz": {
				MakeArg: func() interface{} {
					ret := make([]GetBazArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetBazArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetBazArg)(nil), args)
						return
					}
					ret, err = i.GetBaz(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"notifier": {
				MakeArg: func() interface{} {
					ret := make([]NotifierArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]NotifierArg)
					if !ok {
						err = rpc.NewTypeError((*[]NotifierArg)(nil), args)
						return
					}
					err = i.Notifier(ctx, (*typedArgs)[0].I)
					return
				},
				MethodType: rpc.MethodNotify,
			},
		},
	}
}

type SampleClient struct {
	Cli rpc.GenericClient
}

// GetBaz will get a baz like you wouldn't believe.
// If this baz isn't gotten, then I'll eat my hat
// 
// And then.
func (c SampleClient) GetBaz(ctx context.Context, __arg GetBazArg) (res keybase1.Baz,err error) {
	err = c.Cli.Call(ctx, "sample.1.sample.getBaz", []interface{}{__arg}, &res)
	return
}

// Notifier notifies the notifiee.
func (c SampleClient) Notifier(ctx context.Context, i int) (err error) {
	__arg := NotifierArg{ I : i }
	err = c.Cli.Notify(ctx, "sample.1.sample.notifier", []interface{}{__arg})
	return
}
